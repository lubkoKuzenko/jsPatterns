
function Shop(){this.construct=function(builder){builder.step1();builder.step2();builder.step3();return builder.board;}}
function BoardBuilder(){this.board=null;this.step1=function(){this.board=new SnowBoard();};this.step2=function(){this.board.addBindings();};this.step3=function(){console.log("I am a snowboard");};}
function SnowBoard(){this.height=157;this.addBindings=function(){this.bindings=true;};}
var shop=new Shop();var boardBuilder=new BoardBuilder();var board=shop.construct(boardBuilder);var Executor=function(){var equipmentManager={buyBoard:function(model){console.log("You've bought "+model);},buyBindings:function(model,color){console.log("You've bought "+model);},buyHelmet:function(model,color){console.log("You've bought "+model);}};return{execute:function(name){return equipmentManager[name]&&equipmentManager[name].apply(equipmentManager,[].slice.call(arguments,1));}}}
var manager=new Executor();manager.execute("buyBoard","Burton");manager.execute("buyBindings","Flow");manager.execute("buyHelmet","Head");function Boarder(name,board){this.name=name;this.board=board;this.toString=function(){return this.name+" has "+this.board;};}
var Jon=new Boarder("Bart","NFA");var Lisa=new Boarder("Lisa","Burton");console.log(Jon.toString());console.log(Lisa.toString());function Boards(){this.price=100;this.getPrice=function(){return this.price;}}
function bindings(board){var price=board.getPrice();board.getPrice=function(){return price+75;};};function boots(board){var price=board.getPrice();board.getPrice=function(){return price+100;};};function helmets(board){var price=board.getPrice();board.getPrice=function(){return price+50;};};var board=new Boards();console.log("Original price: "+board.getPrice());bindings(board);boots(board);helmets(board);console.log("Total price: "+board.getPrice());var Module=(function(){var _private={isValid:false,validate:function(value){if(this.isNumeric(value)){var isValid=true;return isValid;}else{this.exit(value);}},isNumeric:function(n){return!isNaN(parseFloat(n))&&isFinite(n);},formatNumber:function(value){return parseFloat(this.getMathematicallyRoundedValueDecimalPlaces(value,2)).toFixed(2).toString();},getMathematicallyRoundedValueDecimalPlaces:function(argOriginalAmount,argDecimalPlaces){return Math.round(argOriginalAmount*Math.pow(10,argDecimalPlaces))/Math.pow(10,argDecimalPlaces);},exit:function(value){console.log(value+" is not a number");}};return{facade:function(value){if(_private.validate(value)){console.log(_private.formatNumber(value,2));}}};}());Module.facade(1231.227);Module.facade("string");var Factory=function(key){var key=key,map={"skier":Skier,"snowboarder":Snowboarder,"human":Human},constr=map.hasOwnProperty(key)?key:"human";function Skier(){this.action="I like Skiing";console.log(this.action);}
function Snowboarder(){this.action="I like Snowboarding";console.log(this.action);}
function Human(){this.action="I like ...";console.log(this.action);}
return new map[constr]();};Factory("snowboarder");var Factory=function(){}
Factory.prototype.like=function(){return"I like "+this.action;};Factory.factory=function(key){var key=key;if(typeof Factory[key]!=="function"){key="Human";}
if(typeof Factory[key].prototype.like!=="function"){Factory[key].prototype=new Factory();}
return new Factory[key]();}
Factory.Skier=function(){this.action="Skiing";};Factory.Snowboarder=function(){this.action="Snowboarding";};Factory.Human=function(){this.action="...";};Factory.factory("Snowboarder");Factory.factory("Snowboarder").like();const gulp=require('gulp');const concat=require('gulp-concat');const jsmin=require('gulp-jsmin');gulp.task('scripts',function(){gulp.src(['./*.js']).pipe(concat('all.js')).pipe(jsmin()).pipe(gulp.dest('./dist/'))});gulp.task('default',['scripts']);var Iterator=(function(){var index=0,data=["skier","snowboarder","human"],length=data.length;return{next:function(){var element;if(!this.hasNext()){return false;}
element=data[index];index+=1;return element;},hasNext:function(){return index<length;},getCurrentState:function(){return data[index];}};}());var i=0;while(Iterator.hasNext()){if(i===1)
console.log("current state: "+Iterator.getCurrentState());console.log(Iterator.next());i++;}
var Page=function(name){this.name=name;this.spa=null;this.send=function(message,to){this.spa.send(message,this,to);};this.receive=function(message,from){console.log(from.name+" to "+this.name+": "+message);};};var SinglePageApplication=function(){var pages={};return{register:function(page){pages[page.name]=page;page.spa=this;},send:function(message,from,to){if(to){to.receive(message,from);}else{for(key in pages){if(pages[key]!==from){pages[key].receive(message,from);}}}}};};var pageLogin=new Page("Login");var pageScan=new Page("Scan");var pageBirth=new Page("Birth");var pageFinal=new Page("Final");var spa=new SinglePageApplication();spa.register(pageLogin);spa.register(pageScan);spa.register(pageBirth);spa.register(pageFinal);pageLogin.send("I have new content");pageScan.send("I have some changes");pageBirth.send("Hi, I know user birth name",pageFinal);pageFinal.send("Hi, I'm done?",pageLogin);var Board=function(settings){this.model=settings.model||"no model provided";this.color=settings.color||"no colour provided";};var Mixins=function(){};Mixins.prototype={moveUp:function(){console.log("move up");},moveDown:function(){console.log("move down");},stop:function(){console.log("stop!");}};function extend(receivingClass,givingClass){for(var methodName in givingClass.prototype){if(!Object.hasOwnProperty.call(receivingClass.prototype,methodName)){receivingClass.prototype[methodName]=givingClass.prototype[methodName];}}}
extend(Board,Mixins);var myBoard=new Board({model:"Burton",color:"black"});myBoard.moveUp();myBoard.moveDown();myBoard.stop();var Module=(function(){var firstName="Liubomyr",lastName="Kuzenko";var getFullName=function(){var fullName=firstName+" "+lastName;return fullName;}
return{getFirstName:function(){return firstName;},getLastName:function(){return lastName;}};})();Module.getFirstName();Module.getFullName();var myApp=myApp||{}
myApp.id=0;myApp.next=function(){return this.id++;}
myApp.reset=function(){this.id=0;}
console.log(myApp);console.log(myApp.next());console.log(myApp.next());var Observer=function(){var events={};this.listenerCount=function(eventName){var listeners=events[eventName];if(listeners){return listeners.length;}
return 0;};this.addListener=function(eventName,listener){var listeners=events[eventName];if(!listeners){listeners=[];events[eventName]=listeners;}
listeners.push({listener:listener,eventName:eventName});return this;};this.removeListener=function(eventName,listener){var listeners=events[eventName];if(!listeners){return false;}
var length=listeners.length,item,found=false,i;for(i=0;i<length;++i){item=listeners[i];if(item.listener===listener){found=true;break;}}
if(found){listeners.splice(i,1);}
return found;};this.removeAllListeners=function(){var length,listeners,item,i,j
foundItems=[];for(var eventName in events){if(events.hasOwnProperty(eventName)){listeners=events[eventName];for(i=0;i<listeners.length;++i){foundItems.push(listeners[i]);}}}
for(i=0;i<foundItems.length;++i){var foundItem=foundItems[i];this.removeListener(foundItem.eventName,foundItem.listener);}},this.fire=function(eventName,meta,listeners){listeners=typeof(listeners)==='undefined'?events[eventName]:listeners;if(!listeners||listeners.length===0){return;}
var head=listeners[0];head.listener.call(head.context,eventName,meta);var tail=listeners.slice(1,listeners.length);this.fire(eventName,meta,tail);}};Observer.getInstance=function(){if(!Observer._instance){Observer._instance=new Observer();}
return Observer._instance;}
var notificationDispatcher=Observer.getInstance();notificationDispatcher.fire('testEvent');notificationDispatcher.addListener("testEvent",alert("event triggered"),this);var userPrototype={name:"Jim Doe",getName:function(){console.log("User name is: "+this.name);}};function object(proto){var n;function F(){}
F.prototype=proto;n=new F();return n;}
var user=object(userPrototype);user.getName();function Equipment(){this.buyEquipment=function(item){if(item==="snowboard"){return"You need $300";}else if(item==="ski"){return"You need $200";}else{return"You saved money";}}}
function EquipmentProxy(){var equipment=new Equipment(),equipmentcache={};return{buyItem:function(item){if(!equipmentcache[item]){equipmentcache[item]=equipment.buyEquipment(item);}
return equipmentcache[item];}};};var buy=new EquipmentProxy();buy.buyItem("snowboard");var RevealModule=(function(){var firstName="Liubomyr",lastName="Kuzenko"
var getFullName=function(){var fullName=firstName+" "+lastName;return fullName;};var getFirstName=function(){return firstName;};var getLastName=function(){return lastName;};return{getFirstName:getFirstName,getLastName:getLastName};})();RevealModule.getFirstName();RevealModule.getFullName();var Singleton=(function(){var instance;function createInstance(){var string=new String("I am the instance");return string;}
return{getInstance:function(){if(!instance){instance=createInstance();}
return instance;}};})();var instance1=Singleton.getInstance(),instance2=Singleton.getInstance();console.log(instance1===instance2);var Strategy={strategies:{skier:function(input){this.action="I like Skiing";console.log(this.action);},snowboarder:function(input){this.action="I like Snowboarding";console.log(this.action);},human:function(input){this.action="I like ...";console.log(this.action);},default:function(input){console.log("Message from default case");}},say:function(input){var constr=input.toLowerCase();if(this.strategies[constr]){this.strategies[constr](input);}else{this.strategies.default(input);}}}
Strategy.say("skier");Strategy.say("snowboarder");Strategy.say("defalut_test");var Strategy=function(input){var constr=input.toLowerCase();if(this.strategies[constr]){this.strategy=this.strategies[constr]}else{this.strategy=this.strategies.default}}
Strategy.prototype.strategies={skier:function(input){this.action="I like Skiing";console.log(this.action);},snowboarder:function(input){this.action="I like Snowboarding";console.log(this.action);},human:function(input){this.action="I like ...";console.log(this.action);},default:function(input){console.log("Message from default case");}}
Strategy.prototype.say=function(input){this.strategy(input);}
var obj=new Strategy('snowboarder');obj.say("skier");obj.say("snowboarder");obj.say("defalut_test");